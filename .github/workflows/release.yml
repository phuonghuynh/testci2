name: release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Use Ruby
        uses: actions/setup-ruby@v1
        with:
          ruby-version: '2.6'
          architecture: 'x64'
      - name: Parse interscript version
        run: echo "INTERSCRIPT_VERSION=${GITHUB_REF#refs/*/v}" >> ${GITHUB_ENV}
      - name: pull the gem
        uses: actions/checkout@v2
        with:
          repository: 'interscript/interscript-api'
          path: 'git'
          ref: "dev"

      - name: Prepare for lambda upload
        run: |
          echo ${GITHUB_WORKSPACE}
          AWS_LAMBDA="${GITHUB_WORKSPACE}/AWS_LAMBDA"
          echo "AWS_LAMBDA=${AWS_LAMBDA}" >> ${GITHUB_ENV}
          mkdir -p "${AWS_LAMBDA}"

      - name: Build the gem
        working-directory: git
        run: |
          gem install bundler
          bundle config set path "./vendor/bundle"
          bundle install --without=development --jobs 4 --retry 3
          zip -r ${AWS_LAMBDA}/src-api.zip vendor lib
      - name: Build lambda layer
        working-directory: .github/docker
        run: |
          bash build.sh
          zip -r ${AWS_LAMBDA}/lambda-layer.zip libs

      - name: debug
        run: ls -all ${AWS_LAMBDA}

      - name: Release
        uses: softprops/action-gh-release@v1
#        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            ${AWS_LAMBDA}/src-api.zip
            ${AWS_LAMBDA}/lambda-layer.zip
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#      - name: Create Release
#        id: create_release
#        uses: actions/create-release@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          tag_name: ${{ github.ref }}
#          release_name: Release ${{ github.ref }}
#          draft: false
#          prerelease: false
#      - name: Upload Release Asset
#        id: upload-release-asset
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
#          asset_path: ./my-artifact.zip
#          asset_name: my-artifact.zip
#          asset_content_type: application/zip




#      rm -Rf ${local.lambda_src}
#      rm -Rf ${local.lambda_src_zip}
#
#      echo "update git submodules from ROOT"
#      cd ..
#      git submodule update --init --recursive
#      cd -
#
#      cd src-api
#      rm -Rf "./vendor"
#      bundle config set path "./vendor/bundle"
#      bundle install --without=development
#      cd -
#
#      echo "copy lambda resouces for uploading"
#      mkdir -p ${local.lambda_src}
#      cp -Rf src-api/vendor src-api/lib ${local.lambda_src}
